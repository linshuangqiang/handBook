Object
    包含所有JavaScript对象的特性的超类
构造函数
    new Object()
    new Object(value)
参数
    value
        这个可选的参数指定一个原始的JavaScript值（一个数字、布尔值或字符串）；这些值将被分别转换为一个Number、Boolean和String对象
返回
    如果没有传入value参数，这个构造函数将返回一个新创建的Object实例。如果传入一个原始value值，则构造函数将创建并返回一个原始值的Number、Boolean和String封装对象。如果不带new操作符，将Object()构造函数像函数那样调用。则它的行为将和使用new操作符一样
属性
    constructor
        引用当前对象的构造函数（一个JavaScript函数） 
方法
    hasOwnProperty()
        检查对象是否拥有一个指定名字的本地定义（不是继承下来的）的属性。
    isPrototypeOf()
        检查当前对象是不是指定对象的原型
    prototypeIsEnumerable()
        检查指定名字的属性是否存在并可以用for/in循环枚举。
    toLocaleString()
        返回该对象的一个本地化的字符串表示。默认实现是调用toString方法。不过子类可以覆盖它。
    toString()
        返回该对象的一个字符串表示。Object类实现的这个方法非常宽泛，不提供很多有用的信息。子类通常会覆盖自定义的toString方法。
    valueOf()
        返回当前对象的原始值，如果存在原始值，对类型为Object的对象来说，这个方法只是简单的返回对象本身。
静态方法
    Object.create()
        使用指定的原型及属性创建一个新的对象
    Object.defineProperties()
        创建或配置指定对象的一个或多个值
    Object.defineProperty()
        创建或配置指定对象的某个属性
    Object.freeze()
        将指定对象设置为不可改变
    Object.getOwnPropertyDescriptor()
        查询指定对象的指定属性的特性
    Object.getOwnPropertyNames()
        返回一个包含指定对象的所有非继承属性名的数组，包括不可枚举属性
    Object.getPrototypeOf()
        返回指定对象的原型
    Object.isExtensible()
        检查当前对象是否能添加到新的属性中
    Object.isFrozen()
        检查当前对象是否已冻结
    Object.isSealed()
        检查指定对象是否为封闭的（sealed）
    Object.keys()
        返回一个包含指定对象的所有非继承可枚举属性么的数组
    Object.preventExtensions()
        阻止向指定对象添加新的属性
    Object.seal()
        阻止向指定对象添加新属性或删除现有属性
总结
    Object类是JavaScript语言的内置数据类型。是其他所有JavaScript对象的超类，因此，Object类的所有方法和行为都被其他对象继承了。
相关参考
    Array,Boolean,Function,Function.prototype,Number,String