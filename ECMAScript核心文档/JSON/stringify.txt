JSON.stringify()
    序列化对象、数组或原始值
结构
    JSON.stringify(o)
    JSON.stringify(o,filter)
    JSON.stringify(o,filter,indent)
参数
    o
        要转换称JSON字符串的对象、数组或原始值
    filter
        一个可选的函数，用来在字符串格式化前对值做一些替换。也可以是一个数组，包含那些需要字符串化的属性名。
    indent
        可选参数。需要输出格式化的可读代码是，使用indent参数可以指定缩进字符串或用来缩进的空格个数，如果省略此参数，则返回的字符串将不带任何额外的空格，这是给编译器看的，很难阅读。
    返回
        JSON格式的字符串，代表o的值，同时通过filter的过滤，以及根据indent进行了格式化
说明
    JSON.stringify()将原始值、对象或数组转换称一个JSON格式的字符串，该字符串随后可以被JSON.parse()解析。通常：调用该函数时指代一个参数，并返回相对应字符串
    当带一个参数时，且该参数值仅包含对象、数组、字符串、数值、布尔值或null时，字符串化的过程直接明了。然而，当需要字符串化的值包含类的示例对象时，就比较复杂了。当JSON.stringify()遇到带有名为toJSON的方法的对象（或数组）时，它会调用该对象上的toJSON方法的，并使用该方法的返回值而不是对象本身进行字符串化。调用toJSON方法时会传入一个字符串的参数，该参数是对象的属性或数组序号。
    注：toJSON的方法名由将对象转换为JSON的含义，但实际上toJSON可以不转换调用对象：它的作用仅仅是返回一个值，用来在字符串化的过程中，替换原对象
    第二个参数是的可以在字符串化的过程中添加过滤操作。该可选参数可以是函数或数组，这两种情况提供了完全不同的过滤功能，如果是函数，第它是一个replacer函数，与上面描述的soJSON方法类似。如果指定replacer函数，该函数会在每一个需要字符串化的值上调用，this指定定义该值的对象或数组。replacer函数的第一个参数是该对象中的对象属性名或数组序号，第二个参数则是值本身。replacer函数的返回值会替换掉需要字符串的值，如果replacer函数返回undefined或没有返回值，则会在字符串化是忽略该值。
    如果第二个参数是一个字符串数组（或数值数组，数值会转换为字符串），该数组会作为对象属性名。属性名不在该数组中的任何对象属性在字符串化是都将会被忽略的。此外，返回的字符串属性的顺序，会与数组中的属性名一只。
    示例
相关方法
    JSON.parse()